[global]
module = 'matplotlib'
logo = "../matplotlib_logo.png"
wait_for_plt_show = false
exec_failure = "fallback"
submodules = [ "image", "pyplot", "axes", "axes._base", "dviread", "image","figure",'colors', 'transforms']
examples_folder = '/Users/bussonniermatthias/dev/matplotlib/examples/'
early_error = false
execute_exclude_patterns = [
 "matplotlib.axes._base._AxesBase.set_prop_cycle",
 "matplotlib.axes._axes.Axes.axvspan",
 "matplotlib.backend_bases.FigureCanvasBase.new_timer",
 "matplotlib.cbook.pts_to_prestep",
 "matplotlib.cbook.pts_to_poststep",
 "matplotlib.cbook.pts_to_midstep",
 "matplotlib._api.check_shape",
 "matplotlib._api.check_isinstance",
 "matplotlib._api.check_in_list",
 "matplotlib._api.check_getitem",
   ]
examples_exclude = [
# jedi inference issue
"logos2.py",
"multipage_pdf.py",
"load_converter.py",
"date_index_formatter2.py",
# all sphinx gallery skip...
"sgskip.py",
# other
"pathpatch3d.py",
"units/artist_tests.py",
"units/bar_unit_demo.py",
"units/radian_demo.py",
"units/units_scatter.py",
"units/ellipse_with_units.py",
"units/units_sample.py",
"units/annotate_with_units.py",
"units/bar_demo2.py",
"text_labels_and_annotations/usetex_baseline_test.py",
"text_labels_and_annotations/usetex_fonteffects.py",
"text_labels_and_annotations/tex_demo.py",
"text_labels_and_annotations/demo_annotation_box.py",
"text_labels_and_annotations/autowrap.py",
"text_labels_and_annotations/fonts_demo.py",
"text_labels_and_annotations/date_index_formatter.py",
"text_labels_and_annotations/text_rotation.py",
"text_labels_and_annotations/legend_demo.py",
"text_labels_and_annotations/accented_text.py",
"text_labels_and_annotations/date.py",
"text_labels_and_annotations/watermark_text.py",
"text_labels_and_annotations/font_file.py",
"showcase/bachelors_degrees_by_gender.py",
"showcase/integral.py",
"showcase/anatomy.py",
"showcase/xkcd.py",
"axisartist/demo_parasite_axes2.py",
"axisartist/demo_floating_axis.py",
"axisartist/simple_axisline3.py",
"axisartist/demo_parasite_axes.py",
"axisartist/simple_axis_pad.py",
"axisartist/simple_axisline.py",
"axisartist/demo_axisline_style.py",
"axisartist/simple_axis_direction03.py",
"axisartist/demo_ticklabel_direction.py",
"axisartist/simple_axis_direction01.py",
"axisartist/simple_axisartist1.py",
"axisartist/demo_ticklabel_alignment.py",
"axisartist/demo_axis_direction.py",
"axisartist/axis_direction.py",
"axisartist/demo_floating_axes.py",
"lines_bars_and_markers/curve_error_band.py",
"lines_bars_and_markers/eventcollection_demo.py",
"lines_bars_and_markers/multicolored_line.py",
"lines_bars_and_markers/scatter_with_legend.py",
"lines_bars_and_markers/linestyles.py",
"lines_bars_and_markers/line_demo_dash_control.py",
"lines_bars_and_markers/timeline.py",
"lines_bars_and_markers/vline_hline_demo.py",
"lines_bars_and_markers/categorical_variables.py",
"lines_bars_and_markers/eventplot_demo.py",
"lines_bars_and_markers/fill.py",
"lines_bars_and_markers/span_regions.py",
"lines_bars_and_markers/bar_stacked.py",
"lines_bars_and_markers/gradient_check_in_listbar.py",
"lines_bars_and_markers/xcorr_acorr_demo.py",
"lines_bars_and_markers/fill_betweenx_demo.py",
"lines_bars_and_markers/scatter_symbol.py",
"lines_bars_and_markers/scatter_custom_symbol.py",
"lines_bars_and_markers/markevery_demo.py",
"lines_bars_and_markers/joinstyle.py",
"lines_bars_and_markers/marker_reference.py",
"lines_bars_and_markers/multivariate_marker_plot.py",
]
exec = true

[global.expected_errors]
VisitSubstitutionDefinitionNotImplementedError = [
    "matplotlib.markers",
    ]
IncorrectInternalDocsLen = [
    "matplotlib.rc",
    "matplotlib.pyplot.rc",
    "matplotlib.axes._base._process_plot_var_args",
    "matplotlib.dates.ConciseDateFormatter",
    "matplotlib.font_manager.win32FontDirectory",
    "matplotlib.transforms.Affine2D.__init__",
    "matplotlib.transforms.Affine2D.get_matrix",
    "matplotlib.transforms.Affine2D.set_matrix",
    "matplotlib.ticker.LogLocator.__init__",
    "matplotlib.figure.FigureBase._process_projection_requirements",
    "matplotlib.transforms.Transform.__sub__",
    "matplotlib.patches.ConnectionStyle._Base",
    "matplotlib.tri.triinterpolate._safe_inv22_vectorized",
    "matplotlib.transforms.Affine2D.from_values",
    "matplotlib.backend_bases.FigureCanvasBase._switch_canvas_and_return_print_method",
    ]
ValueError = [
    "matplotlib.image.thumbnail",
    "matplotlib.artist.Artist.set_sketch_params",
    "matplotlib.artist.Artist.set_agg_filter",
    "matplotlib.axes._base._AxesBase.set_xlim",
    "matplotlib.axes._base._AxesBase.set_ylim",
    "matplotlib.cm.ScalarMappable.set_clim",
    "matplotlib.patches.FancyBboxPatch.set_boxstyle",
    "matplotlib.spines.Spine.set_bounds",
    "matplotlib.backends.backend_agg.FigureCanvasAgg.print_png",
    "matplotlib.patches.FancyArrowPatch.set_connectionstyle",
    "matplotlib.backends.backend_svg.FigureCanvasSVG.print_svg",
    ]
SpaceAfterBlockDirectiveError = [
    "matplotlib.pyplot.subplot_mosaic",
    "matplotlib.cm.unregister_cmap",
    "matplotlib.axes._base._AxesBase.set_navigate_mode",
    "matplotlib.figure.FigureBase.subplot_mosaic",
    "matplotlib.image.imsave",
    "matplotlib.pyplot.imsave",
    "matplotlib.ft2font.FT2Font"
    ]
AssertionError = [
    "matplotlib.ticker.ScalarFormatter.set_powerlimits",
]

[global.implied_imports]
_api = 'matplotlib._api'

